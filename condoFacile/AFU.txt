Applicazione per condominio. Un condomino accede alla sua area personale, consulta bollette , avvisi generali e personali
gestione chat con altri condomini e amministratore. Scarica le bollette e documenti generali. Propone sulla vetrina delle
iniziative che se vengono flaggate con il massimo dei si vengono approvate e l'amministratore manda email a tutti con il 
documento di approvazione con tanto di firma di tutti. Altrimenti abolite con le motivazioni con solo la firma dell'amministratorestratore
Viene gestito il bilancio del condominio generale acqua corrente parco manutenzione. Ogni condomino ha il suo bilancio 
mensile.


Framework: Spring Boot 3+ (rapido da avviare, robusto)
Librerie chiave:
Spring Web: per creare REST API
Spring Security: per autenticazione/autorizzazione (puoi usare JWT)
Spring Data JPA: per accesso a database
Spring Validation: per validazione input

Database:
Mysql
ORM: Hibernate (via Spring Data JPA)
Autenticazione: JWT (Spring Security + filtro custom) o OAuth2 (Google, GitHub)


mysql -u root -p

CREATE DATABASE condofacileDB DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
USE condofacile;


-- UTENTI
CREATE TABLE utenti (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cognome VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    ruolo ENUM('condomino', 'amministratore') NOT NULL,
    appartamento VARCHAR(10),
    attivo BOOLEAN DEFAULT TRUE
);

-- BOLLETTE
CREATE TABLE bollette (
    id INT AUTO_INCREMENT PRIMARY KEY,
    utente_id INT NOT NULL,
    descrizione TEXT NOT NULL,
    importo DECIMAL(10, 2) NOT NULL,
    data_emissione DATE NOT NULL,
    data_scadenza DATE NOT NULL,
    pagata BOOLEAN DEFAULT FALSE,
    file_url TEXT,
    FOREIGN KEY (utente_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- AVVISI
CREATE TABLE avvisi (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titolo VARCHAR(255) NOT NULL,
    messaggio TEXT NOT NULL,
    data_pubblicazione TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    solo_personale BOOLEAN DEFAULT FALSE,
    destinatario_id INT,
    FOREIGN KEY (destinatario_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- CHAT
CREATE TABLE messaggi_chat (
    id INT AUTO_INCREMENT PRIMARY KEY,
    mittente_id INT NOT NULL,
    destinatario_id INT NOT NULL,
    messaggio TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (mittente_id) REFERENCES utenti(id) ON DELETE CASCADE,
    FOREIGN KEY (destinatario_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- INIZIATIVE
CREATE TABLE iniziative (
    id INT AUTO_INCREMENT PRIMARY KEY,
    proponente_id INT NOT NULL,
    titolo VARCHAR(255) NOT NULL,
    descrizione TEXT NOT NULL,
    data_proposta DATE DEFAULT CURRENT_DATE,
    stato ENUM('in_attesa', 'approvata', 'rifiutata') DEFAULT 'in_attesa',
    documento_approvazione_url TEXT,
    motivazione_rifiuto TEXT,
    FOREIGN KEY (proponente_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- VOTI
CREATE TABLE voti_iniziative (
    id INT AUTO_INCREMENT PRIMARY KEY,
    iniziativa_id INT NOT NULL,
    votante_id INT NOT NULL,
    voto BOOLEAN NOT NULL,
    UNIQUE KEY (iniziativa_id, votante_id),
    FOREIGN KEY (iniziativa_id) REFERENCES iniziative(id) ON DELETE CASCADE,
    FOREIGN KEY (votante_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- FIRME
CREATE TABLE firme (
    id INT AUTO_INCREMENT PRIMARY KEY,
    iniziativa_id INT NOT NULL,
    firmatario_id INT NOT NULL,
    tipo_firma ENUM('approvazione', 'rifiuto') NOT NULL,
    data_firma TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (iniziativa_id) REFERENCES iniziative(id) ON DELETE CASCADE,
    FOREIGN KEY (firmatario_id) REFERENCES utenti(id) ON DELETE CASCADE
);

-- DOCUMENTI
CREATE TABLE documenti (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titolo VARCHAR(255) NOT NULL,
    descrizione TEXT,
    file_url TEXT NOT NULL,
    pubblico BOOLEAN DEFAULT TRUE,
    caricatore_id INT,
    FOREIGN KEY (caricatore_id) REFERENCES utenti(id)
);

-- BILANCIO CONDOMINIALE
CREATE TABLE bilancio_condominio (
    id INT AUTO_INCREMENT PRIMARY KEY,
    anno INT NOT NULL,
    mese INT,
    voce_spesa VARCHAR(255),
    descrizione TEXT,
    importo DECIMAL(10,2),
    categoria ENUM('acqua', 'corrente', 'manutenzione', 'altro')
);

-- BILANCIO PERSONALE
CREATE TABLE bilancio_personale (
    id INT AUTO_INCREMENT PRIMARY KEY,
    utente_id INT NOT NULL,
    anno INT NOT NULL,
    mese INT NOT NULL,
    voce VARCHAR(255),
    importo DECIMAL(10,2),
    positivo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (utente_id) REFERENCES utenti(id) ON DELETE CASCADE
);

SHOW TABLES;

CREATE USER 'condo_user'@'localhost' IDENTIFIED BY 'vf87nbsBnk65';
GRANT ALL PRIVILEGES ON condofacile.* TO 'condo_user'@'localhost';
FLUSH PRIVILEGES;

USER ROOT

port : 3306
user : root
password : bhdg8JK98!

Start App 

http://localhost:9090/Condofacile

ticket
---------------------

ho questa struttura java
api
config
controller
dto
entity
error
repository
security
service util

devo implemntare questo crud 




-- UTENTI
CREATE TABLE utenti (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cognome VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    ruolo ENUM('condomino', 'amministratore') NOT NULL,
    appartamento VARCHAR(10),
    attivo BOOLEAN DEFAULT TRUE
);

ticket 
-----------
1)non devo poter inserire tutti i piani ma solo quelli disponibile dal menu a tendina(non devono uscire occupati)
(servizio be).
2)migliorare il fe responsive iphone
3)ogni messaggio di errore e di successo deve avere la pop up piu carica. 
4)spring security api